from datetime import datetime, timedelta
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from datetime import datetime
from email_settings import HOST, PORT
import sqlite3
import re
DB_NAME = r"C:\Users\Acer\OneDrive\Desktop\Intern\A2A_Hospital\Booking_Agent\schedule.db"

# ==========================
# Ch·ªçn b√°c sƒ© theo s·ªë th·ª© t·ª± ho·∫∑c t√™n
# ==========================
def choose_doctor(user_input: str, doctors: list):
    """
    Tr·∫£ v·ªÅ:
      - dict b√°c sƒ© n·∫øu t√¨m 1 match
      - list[dict] n·∫øu nhi·ªÅu match (c·∫ßn ng∆∞·ªùi d√πng ch·ªçn r√µ h∆°n)
      - None n·∫øu kh√¥ng t√¨m
    doctors: list of dict. Accepts dicts with keys 'id'/'doctor_id', 'name', 'room'
    """
    user_lower = user_input.lower()

    # 1) N·∫øu c√≥ pattern "b√°c sƒ© s·ªë X" ho·∫∑c "bs s·ªë X" -> l·∫•y index t·ª´ context ho·∫∑c list
    m = re.search(r"b√°c sƒ©\s*(?:s·ªë\s*)?(\d+)", user_lower)
    if m:
        idx = int(m.group(1)) - 1
        if 0 <= idx < len(doctors):
            return doctors[idx]
        else:
            return None

    # 2) N·∫øu user ch·ªâ vi·∫øt 1 s·ªë k√®m "th·ª© X" ho·∫∑c "s·ªë X" kh√¥ng c√≥ ch·ªØ b√°c sƒ© (v√≠ d·ª• "s·ªë 2")
    m2 = re.search(r"\b(?:s·ªë|th·ª©)\s*(\d+)\b", user_lower)
    if m2 and "ng√†y" not in user_lower:   # tr√°nh b·∫Øt s·ªë ng√†y nh∆∞ "ng√†y 20"
        idx = int(m2.group(1)) - 1
        if 0 <= idx < len(doctors):
            return doctors[idx]

    # 3) match theo t√™n (contains, case-insensitive)
    matches = []
    for doc in doctors:
        name = doc.get("name", "").lower()
        if name and name in user_lower:
            matches.append(doc)

    if len(matches) == 1:
        return matches[0]
    if len(matches) > 1:
        return matches  # multiple

    # 4) fallback: exact token match (words)
    tokens = re.findall(r"\w+", user_lower)
    for doc in doctors:
        for tok in tokens:
            if tok and tok in doc.get("name","").lower().split():
                return doc

    return None


# ==========================
# L·∫•y danh s√°ch th√¥ng tin c·ªßa to√†n b·ªô b√°c sƒ©
# ==========================
def get_all_doctors():
    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()
    cur.execute("SELECT id, name, room FROM doctors")
    doctors = cur.fetchall()
    conn.close()
    return [{"id": d[0], "name": d[1], "room": d[2]} for d in doctors]


def get_available_slots(doctor_id: str, date: str):
    """
    L·∫•y to√†n b·ªô khung gi·ªù c√≤n tr·ªëng c·ªßa m·ªôt b√°c sƒ© trong ng√†y c·ª• th·ªÉ.

    - doctor_id: id b√°c sƒ©
    - date: ng√†y mu·ªën ki·ªÉm tra (YYYY-MM-DD)
    """
    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()

    # L·∫•y c√°c ca l√†m vi·ªác c·ªë ƒë·ªãnh trong tu·∫ßn c·ªßa b√°c sƒ©
    weekday = str(datetime.strptime(date, "%Y-%m-%d").weekday())  # 0=Mon
    cur.execute("""
        SELECT start_time, end_time
        FROM work_shifts
        WHERE doctor_id = ? AND day_of_week = ?
    """, (doctor_id, weekday))
    base_shifts = cur.fetchall()

    # L·∫•y c√°c ngo·∫°i l·ªá (ngh·ªâ ho·∫∑c tƒÉng ca) trong ng√†y
    cur.execute("""
        SELECT start_time, end_time, is_available
        FROM shift_exceptions
        WHERE doctor_id = ? AND date = ?
    """, (doctor_id, date))
    exceptions = cur.fetchall()

    # L·∫•y c√°c cu·ªôc h·∫πn ƒë√£ ƒë·∫∑t trong ng√†y (ƒë·ªÉ lo·∫°i kh·ªèi danh s√°ch tr·ªëng)
    cur.execute("""
        SELECT start_time, end_time
        FROM appointments
        WHERE doctor_id = ? AND date = ? AND status = 'booked'
    """, (doctor_id, date))
    booked = cur.fetchall()
    conn.close()

    # Gh√©p l·∫°i c√°c ca l√†m vi·ªác c√≥ hi·ªáu l·ª±c trong ng√†y ƒë√≥
    work_periods = []

    # B·∫Øt ƒë·∫ßu t·ª´ ca c·ªë ƒë·ªãnh
    for s, e in base_shifts:
        work_periods.append((s, e))

    # X·ª≠ l√Ω ngo·∫°i l·ªá: n·∫øu is_available=0 (ngh·ªâ) th√¨ xo√°, n·∫øu =1 th√¨ th√™m
    for s, e, avail in exceptions:
        if avail == 0:
            work_periods = [(ws, we) for ws, we in work_periods if not (ws == s and we == e)]
        else:
            work_periods.append((s, e))

    # T·∫°o danh s√°ch slot 30 ph√∫t t·ª´ work_periods, b·ªè nh·ªØng slot ƒë√£ b·ªã ƒë·∫∑t
    def time_range(start, end, step=30):
        cur = datetime.strptime(start, "%H:%M")
        end_t = datetime.strptime(end, "%H:%M")
        while cur + timedelta(minutes=step) <= end_t:
            yield cur.strftime("%H:%M"), (cur + timedelta(minutes=step)).strftime("%H:%M")
            cur += timedelta(minutes=step)

    available = []
    for s, e in work_periods:
        for slot_start, slot_end in time_range(s, e):
            # n·∫øu slot n√†y giao v·ªõi b·∫•t k·ª≥ l·ªãch ƒë√£ ƒë·∫∑t -> b·ªè qua
            overlap = any(not (slot_end <= b_s or slot_start >= b_e) for b_s, b_e in booked)
            if not overlap:
                available.append((slot_start, slot_end))

    return available

def format_slots_human_readable(slots):
    """
    Nh·∫≠n danh s√°ch slot [(start_time, end_time), ...]
    v√† tr·∫£ v·ªÅ chu·ªói text d·ªÖ ƒë·ªçc cho ng∆∞·ªùi d√πng.
    """
    if not slots:
        return "‚ùå Hi·ªán kh√¥ng c√≤n khung gi·ªù tr·ªëng n√†o trong ng√†y n√†y."

    lines = ["üïí C√°c khung gi·ªù tr·ªëng:"]
    for start, end in slots:
        lines.append(f"- {start} ‚Äì {end}")
    return "\n".join(lines)



# ==========================
# Chuy·ªÉn ƒë·ªïi / ƒê·ªãnh d·∫°ng ng√†y gi·ªù
# ==========================
def weekday_to_name(weekday: int) -> str:
    """
    ƒê·ªïi s·ªë th·ª© trong tu·∫ßn (0=Mon...6=Sun) th√†nh t√™n ti·∫øng Anh
    """
    names = ["Monday", "Tuesday", "Wednesday",
             "Thursday", "Friday", "Saturday", "Sunday"]
    return names[weekday]


def format_time_range(start: str, end: str) -> str:
    """
    G·ªôp gi·ªù b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c th√†nh 1 chu·ªói g·ªçn
    """
    return f"{start[:-3]} - {end[:-3]}"  # B·ªè gi√¢y n·∫øu c√≥ HH:MM:SS


def parse_datetime(date_str: str, time_str: str) -> datetime:
    """
    G·ªôp chu·ªói ng√†y (YYYY-MM-DD) v√† gi·ªù (HH:MM:SS) th√†nh 1 datetime
    """
    return datetime.strptime(f"{date_str} {time_str}", "%Y-%m-%d %H:%M:%S")


def is_valid_booking_date(date_str: str) -> bool:
    """
    Ki·ªÉm tra ng√†y c√≥ h·ª£p l·ªá kh√¥ng:
    - Ph·∫£i l·ªõn h∆°n h√¥m nay
    - Kh√¥ng qu√° 7 ng√†y t·ªõi
    """
    try:
        target = datetime.strptime(date_str, "%Y-%m-%d").date()
        today = datetime.now().date()
        return today < target <= today + timedelta(days=7)
    except ValueError:
        return False


# Gi·ªØ alias cho t∆∞∆°ng th√≠ch c≈© n·∫øu app.py g·ªçi validate_date
validate_date = is_valid_booking_date


# ==========================
# T·∫°o ID 5 ch·ªØ s·ªë
# ==========================
def generate_appointment_id(latest_id: int) -> str:
    """
    Sinh m√£ appointment m·ªõi t·ª´ id l·ªõn nh·∫•t hi·ªán t·∫°i (s·ªë int)
    """
    return f"{latest_id + 1:05d}"


# ==========================
# Ti·ªán √≠ch ki·ªÉm tra th·ªùi gian
# ==========================
def is_time_overlap(start1: str, end1: str, start2: str, end2: str) -> bool:
    """
    Ki·ªÉm tra hai kho·∫£ng th·ªùi gian c√≥ b·ªã giao nhau kh√¥ng
    """
    return not (end1 <= start2 or start1 >= end2)

# ==========================
# T·∫°o time cho form
# ==========================
def generate_time_slots(start="06:00", end="18:00", step=30):
    times = []
    current = datetime.strptime(start, "%H:%M")
    end_dt = datetime.strptime(end, "%H:%M")
    while current <= end_dt:
        times.append(current.time())
        current += timedelta(minutes=step)
    return times

# =============================
# H√†m g·ª≠i mail
# =============================
def send_email(to_email, from_email, password, subject, body):
    # T·∫°o server & ƒëƒÉng nh·∫≠p
    server = smtplib.SMTP(HOST, PORT)
    server.starttls()
    try:
        server.login(from_email, password)
    except smtplib.SMTPAuthenticationError:
        print("Error! Invalid Sender Email or Password!")
        server.quit()
        return

    message = MIMEMultipart()
    message['Subject'] = subject
    message['From'] = from_email
    message['To'] = to_email

    message.attach(MIMEText(body, 'plain'))

    server.sendmail(from_email, to_email, message.as_string())
    server.quit()


# =============================
# Chu·∫©n h√≥a ng√†y v·ªÅ dd/mm/yyyy
# =============================
def format_date_vn(date_value):
    if isinstance(date_value, datetime):
        return date_value.strftime("%d/%m/%Y")
    try:
        return datetime.strptime(date_value, "%Y-%m-%d").strftime("%d/%m/%Y")
    except Exception:
        return date_value


# =============================
# Vi·∫øt n·ªôi dung mail x√°c nh·∫≠n
# =============================
def write_confirm_email(data):
    data = data.copy()
    data['Ngay'] = format_date_vn(data['Ngay'])

    email_subject = "X√°c nh·∫≠n ƒë·∫∑t l·ªãch kh√°m t·∫°i B·ªánh vi·ªán {TenBenhVien} - M√£: {MaDatLich}"

    email_template = """
    K√≠nh g·ª≠i: {HoTen},

    C·∫£m ∆°n Qu√Ω kh√°ch ƒë√£ l·ª±a ch·ªçn B·ªánh vi·ªán {TenBenhVien}.
    Ch√∫ng t√¥i xin th√¥ng b√°o ƒë·∫∑t l·ªãch kh√°m c·ªßa Qu√Ω kh√°ch ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n v·ªõi th√¥ng tin chi ti·∫øt nh∆∞ sau:

    Th√¥ng tin ƒë·∫∑t l·ªãch
    - M√£ ƒë·∫∑t l·ªãch: {MaDatLich}
    - H·ªç v√† t√™n: {HoTen}
    - Ng√†y: {Ngay}
    - Gi·ªù: {Gio}
    - Chi nh√°nh/ƒê·ªãa ch·ªâ: {ChiNhanh} - {DiaChi}

    Tr∆∞·ªõc khi t·ªõi kh√°m
    - Vui l√≤ng c√≥ m·∫∑t tr∆∞·ªõc √≠t nh·∫•t 30 ph√∫t ƒë·ªÉ l√†m th·ªß t·ª•c ti·∫øp nh·∫≠n.
    - Mang theo: CMND/CCCD/H·ªô chi·∫øu, th·∫ª BHYT (n·∫øu s·ª≠ d·ª•ng), c√°c k·∫øt qu·∫£ x√©t nghi·ªám/phi·∫øu kh√°m tr∆∞·ªõc (n·∫øu c√≥).
    - N·∫øu l·ªãch kh√°m bao g·ªìm x√©t nghi·ªám y√™u c·∫ßu nh·ªãn ƒÉn ho·∫∑c chu·∫©n b·ªã ƒë·∫∑c bi·ªát, ch√∫ng t√¥i s·∫Ω c√≥ th√¥ng b√°o ri√™ng - vui l√≤ng tu√¢n th·ªß ƒë·ªÉ k·∫øt qu·∫£ ch√≠nh x√°c.
    - Thanh to√°n: h·ªó tr·ª£ ti·ªÅn m·∫∑t, th·∫ª n·ªôi ƒë·ªãa/qu·ªëc t·∫ø, v√† √°p d·ª•ng BHYT theo quy ƒë·ªãnh (n·∫øu c√≥).

    H·ªßy / ƒë·ªïi l·ªãch
    - N·∫øu Qu√Ω kh√°ch c·∫ßn h·ªßy ho·∫∑c thay ƒë·ªïi l·ªãch, vui l√≤ng li√™n h·ªá tr∆∞·ªõc √≠t nh·∫•t 24 gi·ªù (n·∫øu c√≥ th·ªÉ) ƒë·ªÉ ch√∫ng t√¥i s·∫Øp x·∫øp.
    - ƒê·ªïi / h·ªßy qua: Hotline: {Hotline} - Email: {EmailCSKH} - Zalo/Chat: {ZaloChatLink} - Ho·∫∑c truy c·∫≠p ƒë∆∞·ªùng d·∫´n: {LinkDoiHuy}

    L∆∞u √Ω chƒÉm s√≥c s·ª©c kh·ªèe & an to√†n
    - N·∫øu Qu√Ω kh√°ch c√≥ tri·ªáu ch·ª©ng nhi·ªÖm tr√πng h√¥ h·∫•p (s·ªët, ho, kh√≥ th·ªü), vui l√≤ng th√¥ng b√°o tr∆∞·ªõc ƒë·ªÉ nh√¢n vi√™n s·∫Øp x·∫øp khu v·ª±c kh√°m ph√π h·ª£p.
    - B·ªánh vi·ªán tu√¢n th·ªß c√°c quy ƒë·ªãnh an to√†n y t·∫ø; Qu√Ω kh√°ch vui l√≤ng mang kh·∫©u trang v√† tu√¢n th·ªß h∆∞·ªõng d·∫´n c·ªßa nh√¢n vi√™n.

    N·∫øu Qu√Ω kh√°ch c·∫ßn h·ªó tr·ª£ th√™m, xin vui l√≤ng li√™n h·ªá:
    B·ªánh vi·ªán {TenBenhVien} - Hotline: {Hotline} - Email: {EmailCSKH}
    Th·ªùi gian l√†m vi·ªác: {GioLamViec}

    M·ªôt l·∫ßn n·ªØa xin c·∫£m ∆°n Qu√Ω kh√°ch. K√≠nh ch√∫c Qu√Ω kh√°ch s·ª©c kh·ªèe v√† mong ƒë∆∞·ª£c ph·ª•c v·ª•!

    Tr√¢n tr·ªçng,
    ƒê·ªôi ng≈© ChƒÉm s√≥c Kh√°ch h√†ng
    B·ªánh vi·ªán {TenBenhVien}
    ƒê·ªãa ch·ªâ: {DiaChi} | Website: {Website}
    """

    subject = email_subject.format(**data)
    body = email_template.format(**data)
    return subject, body


# =============================
# Vi·∫øt n·ªôi dung mail h·ªßy l·ªãch
# =============================
def write_cancel_email(data):
    data = data.copy()
    data['Ngay'] = format_date_vn(data['Ngay'])
    data['NgayHuy'] = format_date_vn(data.get('NgayHuy', datetime.now().strftime("%Y-%m-%d")))

    email_subject = "X√°c nh·∫≠n H·ª¶Y l·ªãch kh√°m t·∫°i B·ªánh vi·ªán {TenBenhVien} - M√£: {MaDatLich}"

    email_template = """
    K√≠nh g·ª≠i: {HoTen},

    B·ªánh vi·ªán {TenBenhVien} xin x√°c nh·∫≠n r·∫±ng l·ªãch kh√°m c·ªßa Qu√Ω kh√°ch v·ªõi th√¥ng tin sau ƒë√£ ƒë∆∞·ª£c H·ª¶Y:

    Th√¥ng tin ƒë·∫∑t l·ªãch (ƒë√£ h·ªßy):
    - M√£ ƒë·∫∑t l·ªãch: {MaDatLich}
    - H·ªç v√† t√™n: {HoTen}
    - Ng√†y: {Ngay}
    - Gi·ªù: {Gio}
    - Chi nh√°nh/ƒê·ªãa ch·ªâ: {ChiNhanh} - {DiaChi}

    Th√¥ng tin h·ªßy
    - L√Ω do (n·∫øu c√≥): {LyDoHuy}
    - Ng√†y h·ªßy: {NgayHuy}

    N·∫øu qu√Ω kh√°ch h·ªßy nh·∫ßm ho·∫∑c mu·ªën ƒë·∫∑t l·∫°i l·ªãch, vui l√≤ng li√™n h·ªá qua:
    - Hotline: {Hotline}
    - Email: {EmailCSKH}
    - Zalo/Chat: {ZaloChatLink}
    - Ho·∫∑c truy c·∫≠p ƒë∆∞·ªùng d·∫´n: {LinkDoiHuy}

    L∆∞u √Ω:
    - N·∫øu l·ªãch c√≥ y√™u c·∫ßu ho√†n/ho√£n thanh to√°n ho·∫∑c ch√≠nh s√°ch hu·ª∑ ri√™ng, nh√¢n vi√™n CSKH s·∫Ω li√™n h·ªá ƒë·ªÉ h∆∞·ªõng d·∫´n c·ª• th·ªÉ.
    - Th·ªùi gian l√†m vi·ªác CSKH: {GioLamViec}.

    N·∫øu Qu√Ω kh√°ch c·∫ßn h·ªó tr·ª£ th√™m, xin vui l√≤ng li√™n h·ªá:
    B·ªánh vi·ªán {TenBenhVien} - Hotline: {Hotline} - Email: {EmailCSKH}
    Th·ªùi gian l√†m vi·ªác: {GioLamViec}

    M·ªôt l·∫ßn n·ªØa xin c·∫£m ∆°n Qu√Ω kh√°ch. K√≠nh ch√∫c Qu√Ω kh√°ch s·ª©c kh·ªèe v√† mong ƒë∆∞·ª£c ph·ª•c v·ª•!

    Tr√¢n tr·ªçng,
    ƒê·ªôi ng≈© ChƒÉm s√≥c Kh√°ch h√†ng
    B·ªánh vi·ªán {TenBenhVien}
    ƒê·ªãa ch·ªâ: {DiaChi} | Website: {Website}
    """

    subject = email_subject.format(**data)
    body = email_template.format(**data)
    return subject, body


def write_confirm_email_v2(data):
    data = data.copy()
    data['Ngay'] = format_date_vn(data['Ngay'])

    email_subject = "X√°c nh·∫≠n ƒë·∫∑t l·ªãch kh√°m t·∫°i B·ªánh vi·ªán {TenBenhVien} - M√£: {MaDatLich}"

    email_template = """
    K√≠nh g·ª≠i: {HoTen},

    C·∫£m ∆°n Qu√Ω kh√°ch ƒë√£ l·ª±a ch·ªçn B·ªánh vi·ªán {TenBenhVien}.
    Ch√∫ng t√¥i xin th√¥ng b√°o ƒë·∫∑t l·ªãch kh√°m c·ªßa Qu√Ω kh√°ch ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n v·ªõi th√¥ng tin chi ti·∫øt nh∆∞ sau:

    Th√¥ng tin ƒë·∫∑t l·ªãch
    - M√£ ƒë·∫∑t l·ªãch: {MaDatLich}
    - H·ªç v√† t√™n: {HoTen}
    - Ng√†y: {Ngay}
    - Gi·ªù: {Gio}
    - B√°c sƒ©: {doctor_name}
    - Ph√≤ng kh√°m: {doctor_room}
    - Chi nh√°nh/ƒê·ªãa ch·ªâ: {ChiNhanh} - {DiaChi}

    Tr∆∞·ªõc khi t·ªõi kh√°m
    - Vui l√≤ng c√≥ m·∫∑t tr∆∞·ªõc √≠t nh·∫•t 30 ph√∫t ƒë·ªÉ l√†m th·ªß t·ª•c ti·∫øp nh·∫≠n.
    - Mang theo: CMND/CCCD/H·ªô chi·∫øu, th·∫ª BHYT (n·∫øu s·ª≠ d·ª•ng), c√°c k·∫øt qu·∫£ x√©t nghi·ªám/phi·∫øu kh√°m tr∆∞·ªõc (n·∫øu c√≥).
    - N·∫øu l·ªãch kh√°m bao g·ªìm x√©t nghi·ªám y√™u c·∫ßu nh·ªãn ƒÉn ho·∫∑c chu·∫©n b·ªã ƒë·∫∑c bi·ªát, ch√∫ng t√¥i s·∫Ω c√≥ th√¥ng b√°o ri√™ng - vui l√≤ng tu√¢n th·ªß ƒë·ªÉ k·∫øt qu·∫£ ch√≠nh x√°c.
    - Thanh to√°n: h·ªó tr·ª£ ti·ªÅn m·∫∑t, th·∫ª n·ªôi ƒë·ªãa/qu·ªëc t·∫ø, v√† √°p d·ª•ng BHYT theo quy ƒë·ªãnh (n·∫øu c√≥).

    H·ªßy / ƒë·ªïi l·ªãch
    - N·∫øu Qu√Ω kh√°ch c·∫ßn h·ªßy ho·∫∑c thay ƒë·ªïi l·ªãch, vui l√≤ng li√™n h·ªá tr∆∞·ªõc √≠t nh·∫•t 24 gi·ªù (n·∫øu c√≥ th·ªÉ) ƒë·ªÉ ch√∫ng t√¥i s·∫Øp x·∫øp.
    - ƒê·ªïi / h·ªßy qua: Hotline: {Hotline} - Email: {EmailCSKH} - Zalo/Chat: {ZaloChatLink} - Ho·∫∑c truy c·∫≠p ƒë∆∞·ªùng d·∫´n: {LinkDoiHuy}

    N·∫øu Qu√Ω kh√°ch c·∫ßn h·ªó tr·ª£ th√™m, xin vui l√≤ng li√™n h·ªá:
    B·ªánh vi·ªán {TenBenhVien} - Hotline: {Hotline} - Email: {EmailCSKH}
    Th·ªùi gian l√†m vi·ªác: {GioLamViec}

    M·ªôt l·∫ßn n·ªØa xin c·∫£m ∆°n Qu√Ω kh√°ch. K√≠nh ch√∫c Qu√Ω kh√°ch s·ª©c kh·ªèe v√† mong ƒë∆∞·ª£c ph·ª•c v·ª•!

    Tr√¢n tr·ªçng,
    ƒê·ªôi ng≈© ChƒÉm s√≥c Kh√°ch h√†ng
    B·ªánh vi·ªán {TenBenhVien}
    ƒê·ªãa ch·ªâ: {DiaChi} | Website: {Website}
    """

    subject = email_subject.format(**data)
    body = email_template.format(**data)
    return subject, body

def write_cancel_email_v2(data):
    data = data.copy()
    data['Ngay'] = format_date_vn(data['Ngay'])
    data['NgayHuy'] = format_date_vn(data.get('NgayHuy', datetime.now().strftime("%Y-%m-%d")))

    email_subject = "X√°c nh·∫≠n H·ª¶Y l·ªãch kh√°m t·∫°i B·ªánh vi·ªán {TenBenhVien} - M√£: {MaDatLich}"

    email_template = """
    K√≠nh g·ª≠i: {HoTen},

    B·ªánh vi·ªán {TenBenhVien} xin x√°c nh·∫≠n r·∫±ng l·ªãch kh√°m c·ªßa Qu√Ω kh√°ch v·ªõi th√¥ng tin sau ƒë√£ ƒë∆∞·ª£c H·ª¶Y:

    Th√¥ng tin ƒë·∫∑t l·ªãch (ƒë√£ h·ªßy):
    - M√£ ƒë·∫∑t l·ªãch: {MaDatLich}
    - H·ªç v√† t√™n: {HoTen}
    - Ng√†y: {Ngay}
    - Gi·ªù: {Gio}
    - B√°c sƒ©: {doctor_name}
    - Ph√≤ng kh√°m: {doctor_room}
    - Chi nh√°nh/ƒê·ªãa ch·ªâ: {ChiNhanh} - {DiaChi}

    Th√¥ng tin h·ªßy
    - L√Ω do: {LyDoHuy}
    - Ng√†y h·ªßy: {NgayHuy}

    N·∫øu qu√Ω kh√°ch h·ªßy nh·∫ßm ho·∫∑c mu·ªën ƒë·∫∑t l·∫°i l·ªãch, vui l√≤ng li√™n h·ªá qua:
    - Hotline: {Hotline}
    - Email: {EmailCSKH}
    - Zalo/Chat: {ZaloChatLink}
    - Ho·∫∑c truy c·∫≠p ƒë∆∞·ªùng d·∫´n: {LinkDoiHuy}

    N·∫øu Qu√Ω kh√°ch c·∫ßn h·ªó tr·ª£ th√™m, xin vui l√≤ng li√™n h·ªá:
    B·ªánh vi·ªán {TenBenhVien} - Hotline: {Hotline} - Email: {EmailCSKH}
    Th·ªùi gian l√†m vi·ªác: {GioLamViec}

    M·ªôt l·∫ßn n·ªØa xin c·∫£m ∆°n Qu√Ω kh√°ch. K√≠nh ch√∫c Qu√Ω kh√°ch s·ª©c kh·ªèe v√† mong ƒë∆∞·ª£c ph·ª•c v·ª•!

    Tr√¢n tr·ªçng,
    ƒê·ªôi ng≈© ChƒÉm s√≥c Kh√°ch h√†ng
    B·ªánh vi·ªán {TenBenhVien}
    ƒê·ªãa ch·ªâ: {DiaChi} | Website: {Website}
    """

    subject = email_subject.format(**data)
    body = email_template.format(**data)
    return subject, body
